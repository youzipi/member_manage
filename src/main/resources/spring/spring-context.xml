<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--开启扫面注解生成Bean-->
    <context:annotation-config/>
    <context:component-scan base-package="com"/>


    <!-- 导入属性配置文件 -->
    <context:property-placeholder location="classpath:generator.properties"/>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--<property name="connectionProperties" value="${jdbc.prop}"/>-->
    </bean>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--规定了扫描mapper文件的路径 KKK-->
        <property name="mapperLocations" value="classpath*:com/youzipi/mapper/**/*.xml"/>
        <!--指定了Mybatis配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.youzipi.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>


    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="annotationClass" value="org.springframework.stereotype.Repository"/>-->
        <!--<property name="basePackage" value="dao"/>-->
    <!--</bean>-->

    <!--<bean id="userDao" class="com.dao.UserDao">-->
    <!--<property name="sqlSession" ref="sqlSession"/>-->
    <!--</bean>-->
    <!--<bean id="testMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
    <!--<property name="mapperInterface" value="org.mybatis.spring.sample.mapper.UserMapper"/>-->
    <!--<property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
    <!--</bean>-->

    <!--这一段让我们的MapperInterface能够最终在Spring中生成Bean最后被AutoWired-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dao.mapper"/>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
    <aop:aspectj-autoproxy/>
    <!--<bean id="doBeforeAspect" class="com.aspect.ControllerAspect"/>-->
    <bean class="com.aspect.ControllerAspect"/>
    <!--<bean id="userController" class="com.controller.UserController"/>-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!--事务管理-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
    <!--<tx:attributes>-->
    <!--<tx:method name="select*" read-only="true"/>-->
    <!--<tx:method name="find*" read-only="true"/>-->
    <!--<tx:method name="get*" read-only="true"/>-->
    <!--<tx:method name="*"/>-->
    <!--</tx:attributes>-->
    <!--</tx:advice>-->



</beans>